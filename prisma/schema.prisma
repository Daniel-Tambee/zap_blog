// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String          @id @default(uuid()) @map("_id")
  image      String
  title      String
  text       String
  author     String
  tags       Tags[]
  Categories CategoryThing[]
  comments   Comment[]
  category   Category        @default(Opinion_Pieces)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt()
}

model Jobs {
  id                String   @id @default(uuid()) @map("_id")
  title             String
  telecommuting     String[]
  Job_summary       String
  Requirements      String
  Experience        String
  What_you_will_get String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt()
}

enum Category {
  Crypto_Trader_Insights
  Crypto_Beginner
  Press
  Opinion_Pieces
}

model CategoryThing {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  Posts      Post?    @relation(fields: [postId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  postId     String?
}

model Tags {
  id         String   @id @default(uuid()) @map("_id")
  name       String?  @unique
  Post       Post?    @relation(fields: [postId], references: [id])
  postId     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model Subscriber {
  id             String   @id @default(uuid()) @map("_id")
  name           String?  @unique
  email          String   @unique
  Zap_weekly     Boolean
  Beginner_Guide Boolean
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt()
}

model Comment {
  id         String   @id @default(uuid()) @map("_id")
  name       String?  @unique
  email      String
  content    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  Post       Post?    @relation(fields: [postId], references: [id])
  postId     String?
}
